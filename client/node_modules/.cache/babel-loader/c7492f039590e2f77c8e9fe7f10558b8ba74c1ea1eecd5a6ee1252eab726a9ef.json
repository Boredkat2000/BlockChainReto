{"ast":null,"code":"import { ethers } from 'ethers';\nimport { toast } from 'react-toastify';\n\n/**\n * Detecta y configura el proveedor de web3 (MetaMask)\n * @returns {Promise<{provider: ethers.providers.Web3Provider, signer: ethers.Signer}|null>}\n */\nexport const setupWeb3Provider = async () => {\n  try {\n    // Verificar si MetaMask está instalado\n    if (!window.ethereum) {\n      console.error('MetaMask no está instalado');\n      toast.error('MetaMask no está instalado. Por favor instala MetaMask para usar esta aplicación.');\n      return null;\n    }\n    try {\n      // Solicitar conexión a MetaMask\n      await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n    } catch (requestError) {\n      console.error('Error al solicitar cuentas:', requestError);\n      if (requestError.code === 4001) {\n        toast.error('Conexión a MetaMask rechazada. Por favor conecta tu billetera para usar esta aplicación.');\n      } else {\n        toast.error('Error al conectar con MetaMask: ' + (requestError.message || 'Error desconocido'));\n      }\n      return null;\n    }\n\n    // Crear provider y signer\n    const provider = new ethers.providers.Web3Provider(window.ethereum, 'any');\n    await provider.send('eth_requestAccounts', []);\n    const signer = provider.getSigner();\n\n    // Verificar que podemos obtener la dirección para confirmar la conexión\n    try {\n      const address = await signer.getAddress();\n      console.log('Conectado a la dirección:', address);\n    } catch (addressError) {\n      console.error('Error al obtener dirección:', addressError);\n      toast.error('Error al obtener la dirección de la billetera. Por favor intenta de nuevo.');\n      return null;\n    }\n\n    // Configurar listeners para cambios de cuenta y red\n    setupEthereumListeners();\n    return {\n      provider,\n      signer\n    };\n  } catch (error) {\n    console.error('Error al configurar el proveedor web3:', error);\n    toast.error('Error al conectar con MetaMask: ' + (error.message || 'Error desconocido'));\n    return null;\n  }\n};\n\n/**\n * Configura listeners para eventos de MetaMask\n */\nexport const setupEthereumListeners = () => {\n  if (!window.ethereum) return;\n\n  // Remover listeners existentes para evitar duplicados\n  window.ethereum.removeAllListeners('accountsChanged');\n  window.ethereum.removeAllListeners('chainChanged');\n  window.ethereum.removeAllListeners('disconnect');\n\n  // Evento: cambio de cuenta\n  window.ethereum.on('accountsChanged', accounts => {\n    console.log('Cambio de cuenta detectado:', accounts);\n    if (accounts.length === 0) {\n      toast.info('Billetera desconectada. Por favor conecta tu billetera para continuar.');\n    } else {\n      toast.info('Cuenta de billetera cambiada. Refrescando aplicación...');\n    }\n    // Recargar la aplicación para actualizar el estado\n    setTimeout(() => window.location.reload(), 1500);\n  });\n\n  // Evento: cambio de red\n  window.ethereum.on('chainChanged', chainId => {\n    console.log('Cambio de red detectado:', chainId);\n    toast.info('Red blockchain cambiada. Refrescando aplicación...');\n    setTimeout(() => window.location.reload(), 1500);\n  });\n\n  // Evento: desconexión\n  window.ethereum.on('disconnect', error => {\n    console.log('Desconexión detectada:', error);\n    toast.warning('Billetera desconectada del sitio.');\n  });\n};\n\n/**\n * Solicita a MetaMask que cambie a la red especificada\n * @param {string} chainId - ID de la cadena en formato hexadecimal (ej. '0x1' para Ethereum Mainnet)\n * @param {object} networkParams - Parámetros de la red si necesita ser añadida\n */\nexport const switchNetwork = async (chainId, networkParams = null) => {\n  try {\n    if (!window.ethereum) throw new Error('MetaMask no está instalado');\n\n    // Intentar cambiar a la red\n    await window.ethereum.request({\n      method: 'wallet_switchEthereumChain',\n      params: [{\n        chainId\n      }]\n    });\n    return true;\n  } catch (error) {\n    // Si la red no está configurada en MetaMask (error 4902), intentar añadirla\n    if (error.code === 4902 && networkParams) {\n      try {\n        await window.ethereum.request({\n          method: 'wallet_addEthereumChain',\n          params: [networkParams]\n        });\n        return true;\n      } catch (addError) {\n        console.error('Error al añadir la red:', addError);\n        toast.error('No se pudo añadir la red a MetaMask');\n        return false;\n      }\n    }\n    console.error('Error al cambiar de red:', error);\n    toast.error('No se pudo cambiar de red');\n    return false;\n  }\n};\n\n/**\n * Firma un mensaje con la billetera del usuario\n * @param {string} message - Mensaje a firmar\n * @returns {Promise<string|null>} - Firma o null si ocurre un error\n */\nexport const signMessage = async message => {\n  try {\n    if (!message) {\n      console.error('Mensaje vacío para firmar');\n      toast.error('No hay mensaje para firmar');\n      return null;\n    }\n    const setup = await setupWeb3Provider();\n    if (!setup || !setup.signer) {\n      console.error('No se pudo obtener el firmante');\n      return null;\n    }\n    const {\n      signer\n    } = setup;\n    console.log('Intentando firmar mensaje:', message);\n\n    // Asegurarse de que el mensaje sea una cadena\n    const messageString = String(message);\n    const signature = await signer.signMessage(messageString);\n    console.log('Firma generada correctamente:', signature);\n    return signature;\n  } catch (error) {\n    console.error('Error al firmar mensaje:', error);\n    if (error.code === 4001) {\n      toast.error('Firma rechazada por el usuario');\n    } else {\n      toast.error('Error al firmar el mensaje: ' + (error.message || 'Error desconocido'));\n    }\n    return null;\n  }\n};\n\n/**\n * Obtiene la dirección de la billetera conectada\n * @returns {Promise<string|null>} - Dirección de la billetera o null\n */\nexport const getConnectedAddress = async () => {\n  try {\n    if (!window.ethereum) {\n      console.error('MetaMask no está disponible');\n      return null;\n    }\n\n    // Intentar obtener las cuentas sin solicitar permiso\n    const accounts = await window.ethereum.request({\n      method: 'eth_accounts'\n    });\n    if (accounts && accounts.length > 0) {\n      console.log('Dirección conectada encontrada:', accounts[0]);\n      return accounts[0];\n    }\n    console.log('No se encontró ninguna cuenta conectada');\n    return null;\n  } catch (error) {\n    console.error('Error al obtener dirección conectada:', error);\n    return null;\n  }\n};\n\n/**\n * Verifica si la billetera está conectada\n * @returns {Promise<boolean>}\n */\nexport const isWalletConnected = async () => {\n  const address = await getConnectedAddress();\n  return !!address;\n};\n\n/**\n * Formatea una dirección de billetera para mostrarla\n * @param {string} address - Dirección completa\n * @param {number} startLength - Longitud de caracteres al inicio\n * @param {number} endLength - Longitud de caracteres al final\n * @returns {string} - Dirección formateada\n */\nexport const formatAddress = (address, startLength = 6, endLength = 4) => {\n  if (!address) return '';\n  return `${address.substring(0, startLength)}...${address.substring(address.length - endLength)}`;\n};","map":{"version":3,"names":["ethers","toast","setupWeb3Provider","window","ethereum","console","error","request","method","requestError","code","message","provider","providers","Web3Provider","send","signer","getSigner","address","getAddress","log","addressError","setupEthereumListeners","removeAllListeners","on","accounts","length","info","setTimeout","location","reload","chainId","warning","switchNetwork","networkParams","Error","params","addError","signMessage","setup","messageString","String","signature","getConnectedAddress","isWalletConnected","formatAddress","startLength","endLength","substring"],"sources":["C:/Users/katri/CascadeProjects/blockchain-voting-platform/client/src/utils/web3Utils.js"],"sourcesContent":["import { ethers } from 'ethers';\nimport { toast } from 'react-toastify';\n\n/**\n * Detecta y configura el proveedor de web3 (MetaMask)\n * @returns {Promise<{provider: ethers.providers.Web3Provider, signer: ethers.Signer}|null>}\n */\nexport const setupWeb3Provider = async () => {\n  try {\n    // Verificar si MetaMask está instalado\n    if (!window.ethereum) {\n      console.error('MetaMask no está instalado');\n      toast.error('MetaMask no está instalado. Por favor instala MetaMask para usar esta aplicación.');\n      return null;\n    }\n\n    try {\n      // Solicitar conexión a MetaMask\n      await window.ethereum.request({ method: 'eth_requestAccounts' });\n    } catch (requestError) {\n      console.error('Error al solicitar cuentas:', requestError);\n      if (requestError.code === 4001) {\n        toast.error('Conexión a MetaMask rechazada. Por favor conecta tu billetera para usar esta aplicación.');\n      } else {\n        toast.error('Error al conectar con MetaMask: ' + (requestError.message || 'Error desconocido'));\n      }\n      return null;\n    }\n    \n    // Crear provider y signer\n    const provider = new ethers.providers.Web3Provider(window.ethereum, 'any');\n    await provider.send('eth_requestAccounts', []);\n    const signer = provider.getSigner();\n    \n    // Verificar que podemos obtener la dirección para confirmar la conexión\n    try {\n      const address = await signer.getAddress();\n      console.log('Conectado a la dirección:', address);\n    } catch (addressError) {\n      console.error('Error al obtener dirección:', addressError);\n      toast.error('Error al obtener la dirección de la billetera. Por favor intenta de nuevo.');\n      return null;\n    }\n    \n    // Configurar listeners para cambios de cuenta y red\n    setupEthereumListeners();\n    \n    return { provider, signer };\n  } catch (error) {\n    console.error('Error al configurar el proveedor web3:', error);\n    toast.error('Error al conectar con MetaMask: ' + (error.message || 'Error desconocido'));\n    return null;\n  }\n};\n\n/**\n * Configura listeners para eventos de MetaMask\n */\nexport const setupEthereumListeners = () => {\n  if (!window.ethereum) return;\n  \n  // Remover listeners existentes para evitar duplicados\n  window.ethereum.removeAllListeners('accountsChanged');\n  window.ethereum.removeAllListeners('chainChanged');\n  window.ethereum.removeAllListeners('disconnect');\n  \n  // Evento: cambio de cuenta\n  window.ethereum.on('accountsChanged', (accounts) => {\n    console.log('Cambio de cuenta detectado:', accounts);\n    if (accounts.length === 0) {\n      toast.info('Billetera desconectada. Por favor conecta tu billetera para continuar.');\n    } else {\n      toast.info('Cuenta de billetera cambiada. Refrescando aplicación...');\n    }\n    // Recargar la aplicación para actualizar el estado\n    setTimeout(() => window.location.reload(), 1500);\n  });\n  \n  // Evento: cambio de red\n  window.ethereum.on('chainChanged', (chainId) => {\n    console.log('Cambio de red detectado:', chainId);\n    toast.info('Red blockchain cambiada. Refrescando aplicación...');\n    setTimeout(() => window.location.reload(), 1500);\n  });\n  \n  // Evento: desconexión\n  window.ethereum.on('disconnect', (error) => {\n    console.log('Desconexión detectada:', error);\n    toast.warning('Billetera desconectada del sitio.');\n  });\n};\n\n/**\n * Solicita a MetaMask que cambie a la red especificada\n * @param {string} chainId - ID de la cadena en formato hexadecimal (ej. '0x1' para Ethereum Mainnet)\n * @param {object} networkParams - Parámetros de la red si necesita ser añadida\n */\nexport const switchNetwork = async (chainId, networkParams = null) => {\n  try {\n    if (!window.ethereum) throw new Error('MetaMask no está instalado');\n    \n    // Intentar cambiar a la red\n    await window.ethereum.request({\n      method: 'wallet_switchEthereumChain',\n      params: [{ chainId }],\n    });\n    \n    return true;\n  } catch (error) {\n    // Si la red no está configurada en MetaMask (error 4902), intentar añadirla\n    if (error.code === 4902 && networkParams) {\n      try {\n        await window.ethereum.request({\n          method: 'wallet_addEthereumChain',\n          params: [networkParams],\n        });\n        return true;\n      } catch (addError) {\n        console.error('Error al añadir la red:', addError);\n        toast.error('No se pudo añadir la red a MetaMask');\n        return false;\n      }\n    }\n    \n    console.error('Error al cambiar de red:', error);\n    toast.error('No se pudo cambiar de red');\n    return false;\n  }\n};\n\n/**\n * Firma un mensaje con la billetera del usuario\n * @param {string} message - Mensaje a firmar\n * @returns {Promise<string|null>} - Firma o null si ocurre un error\n */\nexport const signMessage = async (message) => {\n  try {\n    if (!message) {\n      console.error('Mensaje vacío para firmar');\n      toast.error('No hay mensaje para firmar');\n      return null;\n    }\n    \n    const setup = await setupWeb3Provider();\n    if (!setup || !setup.signer) {\n      console.error('No se pudo obtener el firmante');\n      return null;\n    }\n    \n    const { signer } = setup;\n    console.log('Intentando firmar mensaje:', message);\n    \n    // Asegurarse de que el mensaje sea una cadena\n    const messageString = String(message);\n    \n    const signature = await signer.signMessage(messageString);\n    console.log('Firma generada correctamente:', signature);\n    return signature;\n  } catch (error) {\n    console.error('Error al firmar mensaje:', error);\n    if (error.code === 4001) {\n      toast.error('Firma rechazada por el usuario');\n    } else {\n      toast.error('Error al firmar el mensaje: ' + (error.message || 'Error desconocido'));\n    }\n    return null;\n  }\n};\n\n/**\n * Obtiene la dirección de la billetera conectada\n * @returns {Promise<string|null>} - Dirección de la billetera o null\n */\nexport const getConnectedAddress = async () => {\n  try {\n    if (!window.ethereum) {\n      console.error('MetaMask no está disponible');\n      return null;\n    }\n    \n    // Intentar obtener las cuentas sin solicitar permiso\n    const accounts = await window.ethereum.request({ method: 'eth_accounts' });\n    \n    if (accounts && accounts.length > 0) {\n      console.log('Dirección conectada encontrada:', accounts[0]);\n      return accounts[0];\n    }\n    \n    console.log('No se encontró ninguna cuenta conectada');\n    return null;\n  } catch (error) {\n    console.error('Error al obtener dirección conectada:', error);\n    return null;\n  }\n};\n\n/**\n * Verifica si la billetera está conectada\n * @returns {Promise<boolean>}\n */\nexport const isWalletConnected = async () => {\n  const address = await getConnectedAddress();\n  return !!address;\n};\n\n/**\n * Formatea una dirección de billetera para mostrarla\n * @param {string} address - Dirección completa\n * @param {number} startLength - Longitud de caracteres al inicio\n * @param {number} endLength - Longitud de caracteres al final\n * @returns {string} - Dirección formateada\n */\nexport const formatAddress = (address, startLength = 6, endLength = 4) => {\n  if (!address) return '';\n  return `${address.substring(0, startLength)}...${address.substring(address.length - endLength)}`;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}