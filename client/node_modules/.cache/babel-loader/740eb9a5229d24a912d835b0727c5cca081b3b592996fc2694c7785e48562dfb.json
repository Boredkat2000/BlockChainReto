{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\katri\\\\CascadeProjects\\\\blockchain-voting-platform\\\\client\\\\src\\\\components\\\\routing\\\\AdminRoute.js\",\n  _s = $RefreshSig$();\nimport React, { useContext } from 'react';\nimport { Navigate } from 'react-router-dom';\nimport AdminContext from '../../context/AdminContext';\nimport { Spinner, Container } from 'react-bootstrap';\n\n/**\n * Componente para proteger rutas de administrador\n * @param {Object} props - Propiedades del componente\n * @param {JSX.Element} props.element - Elemento a renderizar si el usuario es administrador\n * @returns {JSX.Element}\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AdminRoute = ({\n  element\n}) => {\n  _s();\n  const {\n    isAdminAuthenticated,\n    adminLoading\n  } = useContext(AdminContext);\n\n  // Mostrar spinner mientras se verifica la autenticación\n  if (adminLoading) {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      className: \"d-flex justify-content-center align-items-center\",\n      style: {\n        minHeight: \"80vh\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center\",\n        children: [/*#__PURE__*/_jsxDEV(Spinner, {\n          animation: \"border\",\n          variant: \"primary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"mt-3\",\n          children: \"Verificando credenciales de administrador...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Redirigir a login de administrador si no está autenticado\n  if (!isAdminAuthenticated) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/admin-login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Si está autenticado, mostrar el elemento\n  return element;\n};\n_s(AdminRoute, \"RCzuhRTmN6BJuFnOW+tGxwpy1O0=\");\n_c = AdminRoute;\nexport default AdminRoute;\nvar _c;\n$RefreshReg$(_c, \"AdminRoute\");","map":{"version":3,"names":["React","useContext","Navigate","AdminContext","Spinner","Container","jsxDEV","_jsxDEV","AdminRoute","element","_s","isAdminAuthenticated","adminLoading","className","style","minHeight","children","animation","variant","fileName","_jsxFileName","lineNumber","columnNumber","to","_c","$RefreshReg$"],"sources":["C:/Users/katri/CascadeProjects/blockchain-voting-platform/client/src/components/routing/AdminRoute.js"],"sourcesContent":["import React, { useContext } from 'react';\nimport { Navigate } from 'react-router-dom';\nimport AdminContext from '../../context/AdminContext';\nimport { Spinner, Container } from 'react-bootstrap';\n\n/**\n * Componente para proteger rutas de administrador\n * @param {Object} props - Propiedades del componente\n * @param {JSX.Element} props.element - Elemento a renderizar si el usuario es administrador\n * @returns {JSX.Element}\n */\nconst AdminRoute = ({ element }) => {\n  const { isAdminAuthenticated, adminLoading } = useContext(AdminContext);\n\n  // Mostrar spinner mientras se verifica la autenticación\n  if (adminLoading) {\n    return (\n      <Container className=\"d-flex justify-content-center align-items-center\" style={{ minHeight: \"80vh\" }}>\n        <div className=\"text-center\">\n          <Spinner animation=\"border\" variant=\"primary\" />\n          <p className=\"mt-3\">Verificando credenciales de administrador...</p>\n        </div>\n      </Container>\n    );\n  }\n\n  // Redirigir a login de administrador si no está autenticado\n  if (!isAdminAuthenticated) {\n    return <Navigate to=\"/admin-login\" />;\n  }\n\n  // Si está autenticado, mostrar el elemento\n  return element;\n};\n\nexport default AdminRoute;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,OAAOC,YAAY,MAAM,4BAA4B;AACrD,SAASC,OAAO,EAAEC,SAAS,QAAQ,iBAAiB;;AAEpD;AACA;AACA;AACA;AACA;AACA;AALA,SAAAC,MAAA,IAAAC,OAAA;AAMA,MAAMC,UAAU,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAClC,MAAM;IAAEC,oBAAoB;IAAEC;EAAa,CAAC,GAAGX,UAAU,CAACE,YAAY,CAAC;;EAEvE;EACA,IAAIS,YAAY,EAAE;IAChB,oBACEL,OAAA,CAACF,SAAS;MAACQ,SAAS,EAAC,kDAAkD;MAACC,KAAK,EAAE;QAAEC,SAAS,EAAE;MAAO,CAAE;MAAAC,QAAA,eACnGT,OAAA;QAAKM,SAAS,EAAC,aAAa;QAAAG,QAAA,gBAC1BT,OAAA,CAACH,OAAO;UAACa,SAAS,EAAC,QAAQ;UAACC,OAAO,EAAC;QAAS;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAChDf,OAAA;UAAGM,SAAS,EAAC,MAAM;UAAAG,QAAA,EAAC;QAA4C;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG,CAAC;EAEhB;;EAEA;EACA,IAAI,CAACX,oBAAoB,EAAE;IACzB,oBAAOJ,OAAA,CAACL,QAAQ;MAACqB,EAAE,EAAC;IAAc;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACvC;;EAEA;EACA,OAAOb,OAAO;AAChB,CAAC;AAACC,EAAA,CAtBIF,UAAU;AAAAgB,EAAA,GAAVhB,UAAU;AAwBhB,eAAeA,UAAU;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}