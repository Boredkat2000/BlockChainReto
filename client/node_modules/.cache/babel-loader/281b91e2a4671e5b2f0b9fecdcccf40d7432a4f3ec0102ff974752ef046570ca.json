{"ast":null,"code":"import { ethers } from 'ethers';\nimport { toast } from 'react-toastify';\n\n/**\n * Detecta y configura el proveedor de web3 (MetaMask)\n * @returns {Promise<{provider: ethers.providers.Web3Provider, signer: ethers.Signer}|null>}\n */\nexport const setupWeb3Provider = async () => {\n  try {\n    // Verificar si MetaMask está instalado\n    if (!window.ethereum) {\n      toast.error('MetaMask no está instalado. Por favor instala MetaMask para usar esta aplicación.');\n      return null;\n    }\n\n    // Solicitar conexión a MetaMask\n    await window.ethereum.request({\n      method: 'eth_requestAccounts'\n    });\n\n    // Crear provider y signer\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n\n    // Configurar listeners para cambios de cuenta y red\n    setupEthereumListeners();\n    return {\n      provider,\n      signer\n    };\n  } catch (error) {\n    console.error('Error al configurar el proveedor web3:', error);\n    if (error.code === 4001) {\n      // Usuario rechazó la conexión\n      toast.error('Conexión a MetaMask rechazada. Por favor conecta tu billetera para usar esta aplicación.');\n    } else {\n      toast.error('Error al conectar con MetaMask. Por favor recarga la página e intenta de nuevo.');\n    }\n    return null;\n  }\n};\n\n/**\n * Configura listeners para eventos de MetaMask\n */\nexport const setupEthereumListeners = () => {\n  if (!window.ethereum) return;\n\n  // Evento: cambio de cuenta\n  window.ethereum.on('accountsChanged', accounts => {\n    if (accounts.length === 0) {\n      toast.info('Billetera desconectada. Por favor conecta tu billetera para continuar.');\n    } else {\n      toast.info('Cuenta de billetera cambiada. Refrescando aplicación...');\n    }\n    // Recargar la aplicación para actualizar el estado\n    window.location.reload();\n  });\n\n  // Evento: cambio de red\n  window.ethereum.on('chainChanged', () => {\n    toast.info('Red blockchain cambiada. Refrescando aplicación...');\n    window.location.reload();\n  });\n};\n\n/**\n * Solicita a MetaMask que cambie a la red especificada\n * @param {string} chainId - ID de la cadena en formato hexadecimal (ej. '0x1' para Ethereum Mainnet)\n * @param {object} networkParams - Parámetros de la red si necesita ser añadida\n */\nexport const switchNetwork = async (chainId, networkParams = null) => {\n  try {\n    if (!window.ethereum) throw new Error('MetaMask no está instalado');\n\n    // Intentar cambiar a la red\n    await window.ethereum.request({\n      method: 'wallet_switchEthereumChain',\n      params: [{\n        chainId\n      }]\n    });\n    return true;\n  } catch (error) {\n    // Si la red no está configurada en MetaMask (error 4902), intentar añadirla\n    if (error.code === 4902 && networkParams) {\n      try {\n        await window.ethereum.request({\n          method: 'wallet_addEthereumChain',\n          params: [networkParams]\n        });\n        return true;\n      } catch (addError) {\n        console.error('Error al añadir la red:', addError);\n        toast.error('No se pudo añadir la red a MetaMask');\n        return false;\n      }\n    }\n    console.error('Error al cambiar de red:', error);\n    toast.error('No se pudo cambiar de red');\n    return false;\n  }\n};\n\n/**\n * Firma un mensaje con la billetera del usuario\n * @param {string} message - Mensaje a firmar\n * @returns {Promise<string|null>} - Firma o null si ocurre un error\n */\nexport const signMessage = async message => {\n  try {\n    const {\n      signer\n    } = await setupWeb3Provider();\n    if (!signer) return null;\n    const signature = await signer.signMessage(message);\n    return signature;\n  } catch (error) {\n    console.error('Error al firmar mensaje:', error);\n    if (error.code === 4001) {\n      toast.error('Firma rechazada por el usuario');\n    } else {\n      toast.error('Error al firmar el mensaje');\n    }\n    return null;\n  }\n};\n\n/**\n * Obtiene la dirección de la billetera conectada\n * @returns {Promise<string|null>} - Dirección de la billetera o null\n */\nexport const getConnectedAddress = async () => {\n  try {\n    if (!window.ethereum) return null;\n    const accounts = await window.ethereum.request({\n      method: 'eth_accounts'\n    });\n    return accounts.length > 0 ? accounts[0] : null;\n  } catch (error) {\n    console.error('Error al obtener dirección conectada:', error);\n    return null;\n  }\n};\n\n/**\n * Verifica si la billetera está conectada\n * @returns {Promise<boolean>}\n */\nexport const isWalletConnected = async () => {\n  const address = await getConnectedAddress();\n  return !!address;\n};\n\n/**\n * Formatea una dirección de billetera para mostrarla\n * @param {string} address - Dirección completa\n * @param {number} startLength - Longitud de caracteres al inicio\n * @param {number} endLength - Longitud de caracteres al final\n * @returns {string} - Dirección formateada\n */\nexport const formatAddress = (address, startLength = 6, endLength = 4) => {\n  if (!address) return '';\n  return `${address.substring(0, startLength)}...${address.substring(address.length - endLength)}`;\n};","map":{"version":3,"names":["ethers","toast","setupWeb3Provider","window","ethereum","error","request","method","provider","providers","Web3Provider","signer","getSigner","setupEthereumListeners","console","code","on","accounts","length","info","location","reload","switchNetwork","chainId","networkParams","Error","params","addError","signMessage","message","signature","getConnectedAddress","isWalletConnected","address","formatAddress","startLength","endLength","substring"],"sources":["C:/Users/katri/CascadeProjects/blockchain-voting-platform/client/src/utils/web3Utils.js"],"sourcesContent":["import { ethers } from 'ethers';\nimport { toast } from 'react-toastify';\n\n/**\n * Detecta y configura el proveedor de web3 (MetaMask)\n * @returns {Promise<{provider: ethers.providers.Web3Provider, signer: ethers.Signer}|null>}\n */\nexport const setupWeb3Provider = async () => {\n  try {\n    // Verificar si MetaMask está instalado\n    if (!window.ethereum) {\n      toast.error('MetaMask no está instalado. Por favor instala MetaMask para usar esta aplicación.');\n      return null;\n    }\n\n    // Solicitar conexión a MetaMask\n    await window.ethereum.request({ method: 'eth_requestAccounts' });\n    \n    // Crear provider y signer\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    \n    // Configurar listeners para cambios de cuenta y red\n    setupEthereumListeners();\n    \n    return { provider, signer };\n  } catch (error) {\n    console.error('Error al configurar el proveedor web3:', error);\n    if (error.code === 4001) {\n      // Usuario rechazó la conexión\n      toast.error('Conexión a MetaMask rechazada. Por favor conecta tu billetera para usar esta aplicación.');\n    } else {\n      toast.error('Error al conectar con MetaMask. Por favor recarga la página e intenta de nuevo.');\n    }\n    return null;\n  }\n};\n\n/**\n * Configura listeners para eventos de MetaMask\n */\nexport const setupEthereumListeners = () => {\n  if (!window.ethereum) return;\n  \n  // Evento: cambio de cuenta\n  window.ethereum.on('accountsChanged', (accounts) => {\n    if (accounts.length === 0) {\n      toast.info('Billetera desconectada. Por favor conecta tu billetera para continuar.');\n    } else {\n      toast.info('Cuenta de billetera cambiada. Refrescando aplicación...');\n    }\n    // Recargar la aplicación para actualizar el estado\n    window.location.reload();\n  });\n  \n  // Evento: cambio de red\n  window.ethereum.on('chainChanged', () => {\n    toast.info('Red blockchain cambiada. Refrescando aplicación...');\n    window.location.reload();\n  });\n};\n\n/**\n * Solicita a MetaMask que cambie a la red especificada\n * @param {string} chainId - ID de la cadena en formato hexadecimal (ej. '0x1' para Ethereum Mainnet)\n * @param {object} networkParams - Parámetros de la red si necesita ser añadida\n */\nexport const switchNetwork = async (chainId, networkParams = null) => {\n  try {\n    if (!window.ethereum) throw new Error('MetaMask no está instalado');\n    \n    // Intentar cambiar a la red\n    await window.ethereum.request({\n      method: 'wallet_switchEthereumChain',\n      params: [{ chainId }],\n    });\n    \n    return true;\n  } catch (error) {\n    // Si la red no está configurada en MetaMask (error 4902), intentar añadirla\n    if (error.code === 4902 && networkParams) {\n      try {\n        await window.ethereum.request({\n          method: 'wallet_addEthereumChain',\n          params: [networkParams],\n        });\n        return true;\n      } catch (addError) {\n        console.error('Error al añadir la red:', addError);\n        toast.error('No se pudo añadir la red a MetaMask');\n        return false;\n      }\n    }\n    \n    console.error('Error al cambiar de red:', error);\n    toast.error('No se pudo cambiar de red');\n    return false;\n  }\n};\n\n/**\n * Firma un mensaje con la billetera del usuario\n * @param {string} message - Mensaje a firmar\n * @returns {Promise<string|null>} - Firma o null si ocurre un error\n */\nexport const signMessage = async (message) => {\n  try {\n    const { signer } = await setupWeb3Provider();\n    if (!signer) return null;\n    \n    const signature = await signer.signMessage(message);\n    return signature;\n  } catch (error) {\n    console.error('Error al firmar mensaje:', error);\n    if (error.code === 4001) {\n      toast.error('Firma rechazada por el usuario');\n    } else {\n      toast.error('Error al firmar el mensaje');\n    }\n    return null;\n  }\n};\n\n/**\n * Obtiene la dirección de la billetera conectada\n * @returns {Promise<string|null>} - Dirección de la billetera o null\n */\nexport const getConnectedAddress = async () => {\n  try {\n    if (!window.ethereum) return null;\n    \n    const accounts = await window.ethereum.request({ method: 'eth_accounts' });\n    return accounts.length > 0 ? accounts[0] : null;\n  } catch (error) {\n    console.error('Error al obtener dirección conectada:', error);\n    return null;\n  }\n};\n\n/**\n * Verifica si la billetera está conectada\n * @returns {Promise<boolean>}\n */\nexport const isWalletConnected = async () => {\n  const address = await getConnectedAddress();\n  return !!address;\n};\n\n/**\n * Formatea una dirección de billetera para mostrarla\n * @param {string} address - Dirección completa\n * @param {number} startLength - Longitud de caracteres al inicio\n * @param {number} endLength - Longitud de caracteres al final\n * @returns {string} - Dirección formateada\n */\nexport const formatAddress = (address, startLength = 6, endLength = 4) => {\n  if (!address) return '';\n  return `${address.substring(0, startLength)}...${address.substring(address.length - endLength)}`;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}