{"ast":null,"code":"import { setupWeb3Provider } from '../utils/web3Utils';\n\n/**\n * Servicio para operaciones de administración\n */\nexport const adminService = {\n  /**\n   * Login de administrador con usuario y contraseña\n   * @param {string} username - Nombre de usuario\n   * @param {string} password - Contraseña\n   * @returns {Promise<Object>} Resultado de la autenticación\n   */\n  login: async (username, password) => {\n    try {\n      const response = await fetch(`${process.env.REACT_APP_API_URL || 'http://localhost:5000'}/api/admin/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          password\n        })\n      });\n      const data = await response.json();\n      if (!data.success) {\n        return {\n          success: false,\n          error: data.message || 'Error de autenticación'\n        };\n      }\n\n      // Guardar la sesión del administrador\n      localStorage.setItem('admin_token', data.token);\n      localStorage.setItem('admin_name', data.admin.name);\n      localStorage.setItem('admin_username', data.admin.username);\n      localStorage.setItem('admin_permissions', JSON.stringify(data.admin.permissions));\n      return {\n        success: true,\n        admin: data.admin,\n        token: data.token\n      };\n    } catch (error) {\n      console.error('Error en login de administrador:', error);\n      return {\n        success: false,\n        error: error.message || 'Error desconocido durante la autenticación'\n      };\n    }\n  },\n  /**\n   * Login de administrador con MetaMask\n   * @returns {Promise<Object>} Resultado de la autenticación\n   */\n  loginWithMetaMask: async () => {\n    try {\n      // Configurar proveedor Web3\n      const web3Setup = await setupWeb3Provider();\n      if (!web3Setup) {\n        return {\n          success: false,\n          error: 'No se pudo conectar a MetaMask'\n        };\n      }\n      const {\n        signer\n      } = web3Setup;\n      const address = await signer.getAddress();\n\n      // Obtener nonce del servidor\n      const nonceResponse = await fetch(`${process.env.REACT_APP_API_URL || 'http://localhost:5000'}/api/admin/nonce`, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const nonceData = await nonceResponse.json();\n      if (!nonceData.success) {\n        return {\n          success: false,\n          error: nonceData.message || 'Error al obtener nonce de autenticación'\n        };\n      }\n\n      // Firmar mensaje con nonce\n      const signature = await signer.signMessage(nonceData.message);\n      if (!signature) {\n        return {\n          success: false,\n          error: 'Error al firmar el mensaje'\n        };\n      }\n\n      // Verificar firma en el servidor\n      const authResponse = await fetch(`${process.env.REACT_APP_API_URL || 'http://localhost:5000'}/api/admin/verify-signature`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          address,\n          signature,\n          message: nonceData.message\n        })\n      });\n      const authData = await authResponse.json();\n      if (!authData.success) {\n        return {\n          success: false,\n          error: authData.message || 'Error de autenticación'\n        };\n      }\n\n      // Guardar la sesión del administrador\n      localStorage.setItem('admin_token', authData.token);\n      localStorage.setItem('admin_name', authData.admin.name);\n      localStorage.setItem('admin_username', authData.admin.username);\n      localStorage.setItem('admin_permissions', JSON.stringify(authData.admin.permissions));\n      localStorage.setItem('admin_wallet', address);\n      return {\n        success: true,\n        admin: authData.admin,\n        token: authData.token,\n        address\n      };\n    } catch (error) {\n      console.error('Error en login de administrador con MetaMask:', error);\n      return {\n        success: false,\n        error: error.message || 'Error desconocido durante la autenticación'\n      };\n    }\n  },\n  /**\n   * Verificar si hay una sesión activa de administrador\n   * @returns {boolean}\n   */\n  hasActiveSession: () => {\n    const token = localStorage.getItem('admin_token');\n    return !!token;\n  },\n  /**\n   * Obtener el token de autenticación del administrador\n   * @returns {string|null}\n   */\n  getAuthToken: () => {\n    return localStorage.getItem('admin_token');\n  },\n  /**\n   * Obtener el perfil del administrador actual\n   * @returns {Promise<Object>} Perfil del administrador\n   */\n  getProfile: async () => {\n    try {\n      const token = localStorage.getItem('admin_token');\n      if (!token) {\n        return {\n          success: false,\n          error: 'No hay sesión de administrador'\n        };\n      }\n      const response = await fetch(`${process.env.REACT_APP_API_URL || 'http://localhost:5000'}/api/admin/profile`, {\n        headers: {\n          'Content-Type': 'application/json',\n          'x-auth-token': token\n        }\n      });\n      const data = await response.json();\n      if (!data.success) {\n        return {\n          success: false,\n          error: data.message || 'Error al obtener perfil'\n        };\n      }\n      return {\n        success: true,\n        admin: data.admin\n      };\n    } catch (error) {\n      console.error('Error al obtener perfil de administrador:', error);\n      return {\n        success: false,\n        error: error.message || 'Error desconocido al obtener perfil'\n      };\n    }\n  },\n  /**\n   * Cerrar sesión de administrador\n   */\n  logout: () => {\n    localStorage.removeItem('admin_token');\n    localStorage.removeItem('admin_name');\n    localStorage.removeItem('admin_username');\n    localStorage.removeItem('admin_permissions');\n    localStorage.removeItem('admin_wallet');\n  }\n};","map":{"version":3,"names":["setupWeb3Provider","adminService","login","username","password","response","fetch","process","env","REACT_APP_API_URL","method","headers","body","JSON","stringify","data","json","success","error","message","localStorage","setItem","token","admin","name","permissions","console","loginWithMetaMask","web3Setup","signer","address","getAddress","nonceResponse","nonceData","signature","signMessage","authResponse","authData","hasActiveSession","getItem","getAuthToken","getProfile","logout","removeItem"],"sources":["C:/Users/katri/CascadeProjects/blockchain-voting-platform/client/src/services/adminService.js"],"sourcesContent":["import { setupWeb3Provider } from '../utils/web3Utils';\n\n/**\n * Servicio para operaciones de administración\n */\nexport const adminService = {\n  /**\n   * Login de administrador con usuario y contraseña\n   * @param {string} username - Nombre de usuario\n   * @param {string} password - Contraseña\n   * @returns {Promise<Object>} Resultado de la autenticación\n   */\n  login: async (username, password) => {\n    try {\n      const response = await fetch(\n        `${process.env.REACT_APP_API_URL || 'http://localhost:5000'}/api/admin/login`,\n        {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({ username, password })\n        }\n      );\n\n      const data = await response.json();\n      if (!data.success) {\n        return { success: false, error: data.message || 'Error de autenticación' };\n      }\n\n      // Guardar la sesión del administrador\n      localStorage.setItem('admin_token', data.token);\n      localStorage.setItem('admin_name', data.admin.name);\n      localStorage.setItem('admin_username', data.admin.username);\n      localStorage.setItem('admin_permissions', JSON.stringify(data.admin.permissions));\n\n      return {\n        success: true,\n        admin: data.admin,\n        token: data.token\n      };\n    } catch (error) {\n      console.error('Error en login de administrador:', error);\n      return {\n        success: false,\n        error: error.message || 'Error desconocido durante la autenticación'\n      };\n    }\n  },\n\n  /**\n   * Login de administrador con MetaMask\n   * @returns {Promise<Object>} Resultado de la autenticación\n   */\n  loginWithMetaMask: async () => {\n    try {\n      // Configurar proveedor Web3\n      const web3Setup = await setupWeb3Provider();\n      if (!web3Setup) {\n        return { success: false, error: 'No se pudo conectar a MetaMask' };\n      }\n\n      const { signer } = web3Setup;\n      const address = await signer.getAddress();\n\n      // Obtener nonce del servidor\n      const nonceResponse = await fetch(\n        `${process.env.REACT_APP_API_URL || 'http://localhost:5000'}/api/admin/nonce`,\n        {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      const nonceData = await nonceResponse.json();\n      if (!nonceData.success) {\n        return { \n          success: false, \n          error: nonceData.message || 'Error al obtener nonce de autenticación' \n        };\n      }\n\n      // Firmar mensaje con nonce\n      const signature = await signer.signMessage(nonceData.message);\n      if (!signature) {\n        return { success: false, error: 'Error al firmar el mensaje' };\n      }\n\n      // Verificar firma en el servidor\n      const authResponse = await fetch(\n        `${process.env.REACT_APP_API_URL || 'http://localhost:5000'}/api/admin/verify-signature`,\n        {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            address,\n            signature,\n            message: nonceData.message\n          })\n        }\n      );\n\n      const authData = await authResponse.json();\n      if (!authData.success) {\n        return { success: false, error: authData.message || 'Error de autenticación' };\n      }\n\n      // Guardar la sesión del administrador\n      localStorage.setItem('admin_token', authData.token);\n      localStorage.setItem('admin_name', authData.admin.name);\n      localStorage.setItem('admin_username', authData.admin.username);\n      localStorage.setItem('admin_permissions', JSON.stringify(authData.admin.permissions));\n      localStorage.setItem('admin_wallet', address);\n\n      return {\n        success: true,\n        admin: authData.admin,\n        token: authData.token,\n        address\n      };\n    } catch (error) {\n      console.error('Error en login de administrador con MetaMask:', error);\n      return {\n        success: false,\n        error: error.message || 'Error desconocido durante la autenticación'\n      };\n    }\n  },\n\n  /**\n   * Verificar si hay una sesión activa de administrador\n   * @returns {boolean}\n   */\n  hasActiveSession: () => {\n    const token = localStorage.getItem('admin_token');\n    return !!token;\n  },\n\n  /**\n   * Obtener el token de autenticación del administrador\n   * @returns {string|null}\n   */\n  getAuthToken: () => {\n    return localStorage.getItem('admin_token');\n  },\n\n  /**\n   * Obtener el perfil del administrador actual\n   * @returns {Promise<Object>} Perfil del administrador\n   */\n  getProfile: async () => {\n    try {\n      const token = localStorage.getItem('admin_token');\n      if (!token) {\n        return { success: false, error: 'No hay sesión de administrador' };\n      }\n\n      const response = await fetch(\n        `${process.env.REACT_APP_API_URL || 'http://localhost:5000'}/api/admin/profile`,\n        {\n          headers: {\n            'Content-Type': 'application/json',\n            'x-auth-token': token\n          }\n        }\n      );\n\n      const data = await response.json();\n      if (!data.success) {\n        return { success: false, error: data.message || 'Error al obtener perfil' };\n      }\n\n      return {\n        success: true,\n        admin: data.admin\n      };\n    } catch (error) {\n      console.error('Error al obtener perfil de administrador:', error);\n      return {\n        success: false,\n        error: error.message || 'Error desconocido al obtener perfil'\n      };\n    }\n  },\n\n  /**\n   * Cerrar sesión de administrador\n   */\n  logout: () => {\n    localStorage.removeItem('admin_token');\n    localStorage.removeItem('admin_name');\n    localStorage.removeItem('admin_username');\n    localStorage.removeItem('admin_permissions');\n    localStorage.removeItem('admin_wallet');\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}