{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\katri\\\\CascadeProjects\\\\blockchain-voting-platform\\\\client\\\\src\\\\context\\\\AdminContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { adminService } from '../services/adminService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AdminContext = /*#__PURE__*/createContext();\nexport const AdminProvider = ({\n  children\n}) => {\n  _s();\n  const [isAdminAuthenticated, setIsAdminAuthenticated] = useState(false);\n  const [adminName, setAdminName] = useState('');\n  const [adminUsername, setAdminUsername] = useState('');\n  const [adminWalletAddress, setAdminWalletAddress] = useState('');\n  const [adminPermissions, setAdminPermissions] = useState({});\n  const [adminLoading, setAdminLoading] = useState(true);\n\n  // Verificar si hay una sesión activa al cargar\n  useEffect(() => {\n    const checkAdminSession = async () => {\n      try {\n        setAdminLoading(true);\n\n        // Verificar si hay token almacenado\n        const hasSession = adminService.hasActiveSession();\n        if (!hasSession) {\n          setIsAdminAuthenticated(false);\n          return;\n        }\n\n        // Obtener información del perfil\n        const result = await adminService.getProfile();\n        if (!result.success) {\n          console.error('Error al verificar sesión de administrador:', result.error);\n          adminLogout();\n          return;\n        }\n\n        // Sesión válida\n        setAdminDetails(result.admin.name, result.admin.username, result.admin.walletAddress || '', result.admin.permissions || {});\n        setIsAdminAuthenticated(true);\n      } catch (error) {\n        console.error('Error al verificar sesión de administrador:', error);\n        adminLogout();\n      } finally {\n        setAdminLoading(false);\n      }\n    };\n    checkAdminSession();\n  }, []);\n\n  // Iniciar sesión de administrador\n  const adminLogin = async (username, password) => {\n    try {\n      const result = await adminService.login(username, password);\n      if (!result.success) {\n        return {\n          success: false,\n          error: result.error\n        };\n      }\n      setAdminDetails(result.admin.name, result.admin.username, result.admin.walletAddress || '', result.admin.permissions || {});\n      setIsAdminAuthenticated(true);\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Error en login de administrador:', error);\n      return {\n        success: false,\n        error: error.message || 'Error de autenticación'\n      };\n    }\n  };\n\n  // Iniciar sesión con MetaMask\n  const adminLoginWithMetaMask = async () => {\n    try {\n      const result = await adminService.loginWithMetaMask();\n      if (!result.success) {\n        return {\n          success: false,\n          error: result.error\n        };\n      }\n      setAdminDetails(result.admin.name, result.admin.username, result.address || '', result.admin.permissions || {});\n      setIsAdminAuthenticated(true);\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Error en login de administrador con MetaMask:', error);\n      return {\n        success: false,\n        error: error.message || 'Error de autenticación'\n      };\n    }\n  };\n\n  // Cerrar sesión de administrador\n  const adminLogout = () => {\n    adminService.logout();\n    setIsAdminAuthenticated(false);\n    setAdminDetails('', '', '', {});\n  };\n\n  // Función auxiliar para actualizar los detalles del administrador\n  const setAdminDetails = (name, username, walletAddress, permissions) => {\n    setAdminName(name);\n    setAdminUsername(username);\n    setAdminWalletAddress(walletAddress);\n    setAdminPermissions(permissions);\n  };\n  return /*#__PURE__*/_jsxDEV(AdminContext.Provider, {\n    value: {\n      isAdminAuthenticated,\n      adminName,\n      adminUsername,\n      adminWalletAddress,\n      adminPermissions,\n      adminLoading,\n      adminLogin,\n      adminLoginWithMetaMask,\n      adminLogout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n_s(AdminProvider, \"PgoGioo4qQnz0iCdUd0KT4Oi5KM=\");\n_c = AdminProvider;\nexport default AdminContext;\nvar _c;\n$RefreshReg$(_c, \"AdminProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","adminService","jsxDEV","_jsxDEV","AdminContext","AdminProvider","children","_s","isAdminAuthenticated","setIsAdminAuthenticated","adminName","setAdminName","adminUsername","setAdminUsername","adminWalletAddress","setAdminWalletAddress","adminPermissions","setAdminPermissions","adminLoading","setAdminLoading","checkAdminSession","hasSession","hasActiveSession","result","getProfile","success","console","error","adminLogout","setAdminDetails","admin","name","username","walletAddress","permissions","adminLogin","password","login","message","adminLoginWithMetaMask","loginWithMetaMask","address","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/katri/CascadeProjects/blockchain-voting-platform/client/src/context/AdminContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport { adminService } from '../services/adminService';\n\nconst AdminContext = createContext();\n\nexport const AdminProvider = ({ children }) => {\n  const [isAdminAuthenticated, setIsAdminAuthenticated] = useState(false);\n  const [adminName, setAdminName] = useState('');\n  const [adminUsername, setAdminUsername] = useState('');\n  const [adminWalletAddress, setAdminWalletAddress] = useState('');\n  const [adminPermissions, setAdminPermissions] = useState({});\n  const [adminLoading, setAdminLoading] = useState(true);\n\n  // Verificar si hay una sesión activa al cargar\n  useEffect(() => {\n    const checkAdminSession = async () => {\n      try {\n        setAdminLoading(true);\n        \n        // Verificar si hay token almacenado\n        const hasSession = adminService.hasActiveSession();\n        if (!hasSession) {\n          setIsAdminAuthenticated(false);\n          return;\n        }\n\n        // Obtener información del perfil\n        const result = await adminService.getProfile();\n        if (!result.success) {\n          console.error('Error al verificar sesión de administrador:', result.error);\n          adminLogout();\n          return;\n        }\n\n        // Sesión válida\n        setAdminDetails(\n          result.admin.name,\n          result.admin.username,\n          result.admin.walletAddress || '',\n          result.admin.permissions || {}\n        );\n        setIsAdminAuthenticated(true);\n      } catch (error) {\n        console.error('Error al verificar sesión de administrador:', error);\n        adminLogout();\n      } finally {\n        setAdminLoading(false);\n      }\n    };\n\n    checkAdminSession();\n  }, []);\n\n  // Iniciar sesión de administrador\n  const adminLogin = async (username, password) => {\n    try {\n      const result = await adminService.login(username, password);\n      \n      if (!result.success) {\n        return { success: false, error: result.error };\n      }\n      \n      setAdminDetails(\n        result.admin.name,\n        result.admin.username,\n        result.admin.walletAddress || '',\n        result.admin.permissions || {}\n      );\n      setIsAdminAuthenticated(true);\n      \n      return { success: true };\n    } catch (error) {\n      console.error('Error en login de administrador:', error);\n      return { success: false, error: error.message || 'Error de autenticación' };\n    }\n  };\n\n  // Iniciar sesión con MetaMask\n  const adminLoginWithMetaMask = async () => {\n    try {\n      const result = await adminService.loginWithMetaMask();\n      \n      if (!result.success) {\n        return { success: false, error: result.error };\n      }\n      \n      setAdminDetails(\n        result.admin.name,\n        result.admin.username,\n        result.address || '',\n        result.admin.permissions || {}\n      );\n      setIsAdminAuthenticated(true);\n      \n      return { success: true };\n    } catch (error) {\n      console.error('Error en login de administrador con MetaMask:', error);\n      return { success: false, error: error.message || 'Error de autenticación' };\n    }\n  };\n\n  // Cerrar sesión de administrador\n  const adminLogout = () => {\n    adminService.logout();\n    setIsAdminAuthenticated(false);\n    setAdminDetails('', '', '', {});\n  };\n\n  // Función auxiliar para actualizar los detalles del administrador\n  const setAdminDetails = (name, username, walletAddress, permissions) => {\n    setAdminName(name);\n    setAdminUsername(username);\n    setAdminWalletAddress(walletAddress);\n    setAdminPermissions(permissions);\n  };\n\n  return (\n    <AdminContext.Provider\n      value={{\n        isAdminAuthenticated,\n        adminName,\n        adminUsername,\n        adminWalletAddress,\n        adminPermissions,\n        adminLoading,\n        adminLogin,\n        adminLoginWithMetaMask,\n        adminLogout\n      }}\n    >\n      {children}\n    </AdminContext.Provider>\n  );\n};\n\nexport default AdminContext;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}