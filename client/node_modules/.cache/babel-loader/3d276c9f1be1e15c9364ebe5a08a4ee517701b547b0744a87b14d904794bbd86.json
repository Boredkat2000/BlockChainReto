{"ast":null,"code":"import { setupWeb3Provider } from '../utils/web3Utils';\n\n/**\n * Servicio para operaciones de administración\n */\nexport const adminService = {\n  /**\n   * Login de administrador con usuario y contraseña\n   * @param {string} username - Nombre de usuario\n   * @param {string} password - Contraseña\n   * @returns {Promise<Object>} Resultado de la autenticación\n   */\n  login: async (username, password) => {\n    try {\n      console.log('Iniciando login de administrador con:', {\n        username\n      });\n\n      // Usando el nuevo puerto 3333 para evitar conflictos\n      const API_URL = 'http://localhost:3333';\n      console.log('Usando API URL:', API_URL);\n      const response = await fetch(`${API_URL}/api/admin/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          password\n        }),\n        mode: 'cors' // Establecer explicitamente el modo CORS\n      });\n      console.log('Respuesta del servidor:', {\n        status: response.status\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        console.log('Error del servidor:', errorData);\n        return {\n          success: false,\n          error: errorData.message || 'Error de autenticación'\n        };\n      }\n      const data = await response.json();\n      console.log('Datos de respuesta:', data);\n      if (!data.success) {\n        return {\n          success: false,\n          error: data.message || 'Error de autenticación'\n        };\n      }\n\n      // Guardar la sesión del administrador\n      localStorage.setItem('admin_token', data.token);\n      localStorage.setItem('admin_name', data.admin.name);\n      localStorage.setItem('admin_username', data.admin.username);\n      localStorage.setItem('admin_permissions', JSON.stringify(data.admin.permissions));\n      return {\n        success: true,\n        admin: data.admin,\n        token: data.token\n      };\n    } catch (error) {\n      console.error('Error en login de administrador:', error);\n      return {\n        success: false,\n        error: error.message || 'Error desconocido durante la autenticación'\n      };\n    }\n  },\n  /**\n   * Login de administrador con MetaMask\n   * @returns {Promise<Object>} Resultado de la autenticación\n   */\n  loginWithMetaMask: async () => {\n    try {\n      // Configurar proveedor Web3\n      const web3Setup = await setupWeb3Provider();\n      if (!web3Setup) {\n        return {\n          success: false,\n          error: 'No se pudo conectar a MetaMask'\n        };\n      }\n      const {\n        signer\n      } = web3Setup;\n      const address = await signer.getAddress();\n\n      // Obtener nonce del servidor\n      const nonceResponse = await fetch(`${process.env.REACT_APP_API_URL || 'http://localhost:5000'}/api/admin/nonce`, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const nonceData = await nonceResponse.json();\n      if (!nonceData.success) {\n        return {\n          success: false,\n          error: nonceData.message || 'Error al obtener nonce de autenticación'\n        };\n      }\n\n      // Firmar mensaje con nonce\n      const signature = await signer.signMessage(nonceData.message);\n      if (!signature) {\n        return {\n          success: false,\n          error: 'Error al firmar el mensaje'\n        };\n      }\n\n      // Verificar firma en el servidor\n      const authResponse = await fetch(`${process.env.REACT_APP_API_URL || 'http://localhost:5000'}/api/admin/verify-signature`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          address,\n          signature,\n          message: nonceData.message\n        })\n      });\n      const authData = await authResponse.json();\n      if (!authData.success) {\n        return {\n          success: false,\n          error: authData.message || 'Error de autenticación'\n        };\n      }\n\n      // Guardar la sesión del administrador\n      localStorage.setItem('admin_token', authData.token);\n      localStorage.setItem('admin_name', authData.admin.name);\n      localStorage.setItem('admin_username', authData.admin.username);\n      localStorage.setItem('admin_permissions', JSON.stringify(authData.admin.permissions));\n      localStorage.setItem('admin_wallet', address);\n      return {\n        success: true,\n        admin: authData.admin,\n        token: authData.token,\n        address\n      };\n    } catch (error) {\n      console.error('Error en login de administrador con MetaMask:', error);\n      return {\n        success: false,\n        error: error.message || 'Error desconocido durante la autenticación'\n      };\n    }\n  },\n  /**\n   * Verificar si hay una sesión activa de administrador\n   * @returns {boolean}\n   */\n  hasActiveSession: () => {\n    const token = localStorage.getItem('admin_token');\n    return !!token;\n  },\n  /**\n   * Obtener el token de autenticación del administrador\n   * @returns {string|null}\n   */\n  getAuthToken: () => {\n    return localStorage.getItem('admin_token');\n  },\n  /**\n   * Obtener el perfil del administrador actual\n   * @returns {Promise<Object>} Perfil del administrador\n   */\n  getProfile: async () => {\n    try {\n      const token = localStorage.getItem('admin_token');\n      if (!token) {\n        return {\n          success: false,\n          error: 'No hay sesión de administrador'\n        };\n      }\n      const response = await fetch(`${process.env.REACT_APP_API_URL || 'http://localhost:5000'}/api/admin/profile`, {\n        headers: {\n          'Content-Type': 'application/json',\n          'x-auth-token': token\n        }\n      });\n      const data = await response.json();\n      if (!data.success) {\n        return {\n          success: false,\n          error: data.message || 'Error al obtener perfil'\n        };\n      }\n      return {\n        success: true,\n        admin: data.admin\n      };\n    } catch (error) {\n      console.error('Error al obtener perfil de administrador:', error);\n      return {\n        success: false,\n        error: error.message || 'Error desconocido al obtener perfil'\n      };\n    }\n  },\n  /**\n   * Cerrar sesión de administrador\n   */\n  logout: () => {\n    localStorage.removeItem('admin_token');\n    localStorage.removeItem('admin_name');\n    localStorage.removeItem('admin_username');\n    localStorage.removeItem('admin_permissions');\n    localStorage.removeItem('admin_wallet');\n  }\n};","map":{"version":3,"names":["setupWeb3Provider","adminService","login","username","password","console","log","API_URL","response","fetch","method","headers","body","JSON","stringify","mode","status","ok","errorData","json","success","error","message","data","localStorage","setItem","token","admin","name","permissions","loginWithMetaMask","web3Setup","signer","address","getAddress","nonceResponse","process","env","REACT_APP_API_URL","nonceData","signature","signMessage","authResponse","authData","hasActiveSession","getItem","getAuthToken","getProfile","logout","removeItem"],"sources":["C:/Users/katri/CascadeProjects/blockchain-voting-platform/client/src/services/adminService.js"],"sourcesContent":["import { setupWeb3Provider } from '../utils/web3Utils';\n\n/**\n * Servicio para operaciones de administración\n */\nexport const adminService = {\n  /**\n   * Login de administrador con usuario y contraseña\n   * @param {string} username - Nombre de usuario\n   * @param {string} password - Contraseña\n   * @returns {Promise<Object>} Resultado de la autenticación\n   */\n  login: async (username, password) => {\n    try {\n      console.log('Iniciando login de administrador con:', { username });\n      \n      // Usando el nuevo puerto 3333 para evitar conflictos\n      const API_URL = 'http://localhost:3333';\n\n      console.log('Usando API URL:', API_URL);\n      \n      const response = await fetch(\n        `${API_URL}/api/admin/login`,\n        {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n          },\n          body: JSON.stringify({ username, password }),\n          mode: 'cors' // Establecer explicitamente el modo CORS\n        }\n      );\n\n      console.log('Respuesta del servidor:', { status: response.status });\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        console.log('Error del servidor:', errorData);\n        return { success: false, error: errorData.message || 'Error de autenticación' };\n      }\n      \n      const data = await response.json();\n      console.log('Datos de respuesta:', data);\n      \n      if (!data.success) {\n        return { success: false, error: data.message || 'Error de autenticación' };\n      }\n\n      // Guardar la sesión del administrador\n      localStorage.setItem('admin_token', data.token);\n      localStorage.setItem('admin_name', data.admin.name);\n      localStorage.setItem('admin_username', data.admin.username);\n      localStorage.setItem('admin_permissions', JSON.stringify(data.admin.permissions));\n\n      return {\n        success: true,\n        admin: data.admin,\n        token: data.token\n      };\n    } catch (error) {\n      console.error('Error en login de administrador:', error);\n      return {\n        success: false,\n        error: error.message || 'Error desconocido durante la autenticación'\n      };\n    }\n  },\n\n  /**\n   * Login de administrador con MetaMask\n   * @returns {Promise<Object>} Resultado de la autenticación\n   */\n  loginWithMetaMask: async () => {\n    try {\n      // Configurar proveedor Web3\n      const web3Setup = await setupWeb3Provider();\n      if (!web3Setup) {\n        return { success: false, error: 'No se pudo conectar a MetaMask' };\n      }\n\n      const { signer } = web3Setup;\n      const address = await signer.getAddress();\n\n      // Obtener nonce del servidor\n      const nonceResponse = await fetch(\n        `${process.env.REACT_APP_API_URL || 'http://localhost:5000'}/api/admin/nonce`,\n        {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      const nonceData = await nonceResponse.json();\n      if (!nonceData.success) {\n        return { \n          success: false, \n          error: nonceData.message || 'Error al obtener nonce de autenticación' \n        };\n      }\n\n      // Firmar mensaje con nonce\n      const signature = await signer.signMessage(nonceData.message);\n      if (!signature) {\n        return { success: false, error: 'Error al firmar el mensaje' };\n      }\n\n      // Verificar firma en el servidor\n      const authResponse = await fetch(\n        `${process.env.REACT_APP_API_URL || 'http://localhost:5000'}/api/admin/verify-signature`,\n        {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            address,\n            signature,\n            message: nonceData.message\n          })\n        }\n      );\n\n      const authData = await authResponse.json();\n      if (!authData.success) {\n        return { success: false, error: authData.message || 'Error de autenticación' };\n      }\n\n      // Guardar la sesión del administrador\n      localStorage.setItem('admin_token', authData.token);\n      localStorage.setItem('admin_name', authData.admin.name);\n      localStorage.setItem('admin_username', authData.admin.username);\n      localStorage.setItem('admin_permissions', JSON.stringify(authData.admin.permissions));\n      localStorage.setItem('admin_wallet', address);\n\n      return {\n        success: true,\n        admin: authData.admin,\n        token: authData.token,\n        address\n      };\n    } catch (error) {\n      console.error('Error en login de administrador con MetaMask:', error);\n      return {\n        success: false,\n        error: error.message || 'Error desconocido durante la autenticación'\n      };\n    }\n  },\n\n  /**\n   * Verificar si hay una sesión activa de administrador\n   * @returns {boolean}\n   */\n  hasActiveSession: () => {\n    const token = localStorage.getItem('admin_token');\n    return !!token;\n  },\n\n  /**\n   * Obtener el token de autenticación del administrador\n   * @returns {string|null}\n   */\n  getAuthToken: () => {\n    return localStorage.getItem('admin_token');\n  },\n\n  /**\n   * Obtener el perfil del administrador actual\n   * @returns {Promise<Object>} Perfil del administrador\n   */\n  getProfile: async () => {\n    try {\n      const token = localStorage.getItem('admin_token');\n      if (!token) {\n        return { success: false, error: 'No hay sesión de administrador' };\n      }\n\n      const response = await fetch(\n        `${process.env.REACT_APP_API_URL || 'http://localhost:5000'}/api/admin/profile`,\n        {\n          headers: {\n            'Content-Type': 'application/json',\n            'x-auth-token': token\n          }\n        }\n      );\n\n      const data = await response.json();\n      if (!data.success) {\n        return { success: false, error: data.message || 'Error al obtener perfil' };\n      }\n\n      return {\n        success: true,\n        admin: data.admin\n      };\n    } catch (error) {\n      console.error('Error al obtener perfil de administrador:', error);\n      return {\n        success: false,\n        error: error.message || 'Error desconocido al obtener perfil'\n      };\n    }\n  },\n\n  /**\n   * Cerrar sesión de administrador\n   */\n  logout: () => {\n    localStorage.removeItem('admin_token');\n    localStorage.removeItem('admin_name');\n    localStorage.removeItem('admin_username');\n    localStorage.removeItem('admin_permissions');\n    localStorage.removeItem('admin_wallet');\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}