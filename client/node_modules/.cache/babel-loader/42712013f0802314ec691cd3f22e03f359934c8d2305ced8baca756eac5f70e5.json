{"ast":null,"code":"import { signMessage, setupWeb3Provider, getConnectedAddress } from '../utils/web3Utils';\n\n/**\n * Servicio de autenticaciu00f3n para manejar la conexiu00f3n con MetaMask y firma de mensajes\n */\nexport const authService = {\n  /**\n   * Conecta con MetaMask y autentica al usuario\n   * @returns {Promise<{success: boolean, address: string, token: string}|{success: boolean, error: string}>}\n   */\n  connectWallet: async () => {\n    try {\n      // Configurar proveedor Web3\n      const web3Setup = await setupWeb3Provider();\n      if (!web3Setup) {\n        return {\n          success: false,\n          error: 'No se pudo conectar a MetaMask'\n        };\n      }\n      const {\n        provider,\n        signer\n      } = web3Setup;\n      const address = await signer.getAddress();\n\n      // Obtener nonce del servidor\n      const nonceResponse = await fetch(`${process.env.REACT_APP_API_URL || 'http://localhost:5000'}/api/auth/nonce`, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const nonceData = await nonceResponse.json();\n      if (!nonceData.success) {\n        return {\n          success: false,\n          error: nonceData.message || 'Error al obtener nonce de autenticaciu00f3n'\n        };\n      }\n\n      // Firmar mensaje con nonce\n      const signature = await signer.signMessage(nonceData.message);\n      if (!signature) {\n        return {\n          success: false,\n          error: 'Error al firmar el mensaje'\n        };\n      }\n\n      // Verificar firma en el servidor\n      const authResponse = await fetch(`${process.env.REACT_APP_API_URL || 'http://localhost:5000'}/api/auth/verify-signature`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          address,\n          signature,\n          message: nonceData.message\n        })\n      });\n      const authData = await authResponse.json();\n      if (!authData.success) {\n        return {\n          success: false,\n          error: authData.message || 'Error de autenticaciu00f3n'\n        };\n      }\n\n      // Autenticaciu00f3n exitosa\n      return {\n        success: true,\n        address,\n        token: authData.token\n      };\n    } catch (error) {\n      console.error('Error en autenticaciu00f3n:', error);\n      return {\n        success: false,\n        error: error.message || 'Error desconocido durante la autenticaciu00f3n'\n      };\n    }\n  },\n  /**\n   * Verifica si hay una sesiu00f3n activa guardada\n   * @returns {boolean}\n   */\n  hasActiveSession: () => {\n    const token = localStorage.getItem('auth_token');\n    const address = localStorage.getItem('user_address');\n    return !!(token && address);\n  },\n  /**\n   * Obtiene el token de autenticaciu00f3n actual\n   * @returns {string|null}\n   */\n  getAuthToken: () => {\n    return localStorage.getItem('auth_token');\n  },\n  /**\n   * Obtiene la direcciu00f3n de billetera guardada\n   * @returns {string|null}\n   */\n  getSavedAddress: () => {\n    return localStorage.getItem('user_address');\n  },\n  /**\n   * Guarda la informaciu00f3n de sesiu00f3n\n   * @param {string} address - Direcciu00f3n de la billetera\n   * @param {string} token - Token JWT\n   */\n  saveSession: (address, token) => {\n    localStorage.setItem('auth_token', token);\n    localStorage.setItem('user_address', address);\n  },\n  /**\n   * Cierra la sesiu00f3n\n   */\n  logout: () => {\n    localStorage.removeItem('auth_token');\n    localStorage.removeItem('user_address');\n  },\n  /**\n   * Verifica si la direcciu00f3n proporcionada es un administrador\n   * @param {string} address - Direcciu00f3n a verificar\n   * @returns {boolean}\n   */\n  isAdmin: address => {\n    const adminAddress = process.env.REACT_APP_ADMIN_ADDRESS;\n    if (!adminAddress || !address) return false;\n    return address.toLowerCase() === adminAddress.toLowerCase();\n  }\n};","map":{"version":3,"names":["signMessage","setupWeb3Provider","getConnectedAddress","authService","connectWallet","web3Setup","success","error","provider","signer","address","getAddress","nonceResponse","fetch","process","env","REACT_APP_API_URL","headers","nonceData","json","message","signature","authResponse","method","body","JSON","stringify","authData","token","console","hasActiveSession","localStorage","getItem","getAuthToken","getSavedAddress","saveSession","setItem","logout","removeItem","isAdmin","adminAddress","REACT_APP_ADMIN_ADDRESS","toLowerCase"],"sources":["C:/Users/katri/CascadeProjects/blockchain-voting-platform/client/src/services/authService.js"],"sourcesContent":["import { signMessage, setupWeb3Provider, getConnectedAddress } from '../utils/web3Utils';\n\n/**\n * Servicio de autenticaciu00f3n para manejar la conexiu00f3n con MetaMask y firma de mensajes\n */\nexport const authService = {\n  /**\n   * Conecta con MetaMask y autentica al usuario\n   * @returns {Promise<{success: boolean, address: string, token: string}|{success: boolean, error: string}>}\n   */\n  connectWallet: async () => {\n    try {\n      // Configurar proveedor Web3\n      const web3Setup = await setupWeb3Provider();\n      if (!web3Setup) {\n        return { success: false, error: 'No se pudo conectar a MetaMask' };\n      }\n      \n      const { provider, signer } = web3Setup;\n      const address = await signer.getAddress();\n      \n      // Obtener nonce del servidor\n      const nonceResponse = await fetch(`${process.env.REACT_APP_API_URL || 'http://localhost:5000'}/api/auth/nonce`, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      \n      const nonceData = await nonceResponse.json();\n      if (!nonceData.success) {\n        return { success: false, error: nonceData.message || 'Error al obtener nonce de autenticaciu00f3n' };\n      }\n      \n      // Firmar mensaje con nonce\n      const signature = await signer.signMessage(nonceData.message);\n      if (!signature) {\n        return { success: false, error: 'Error al firmar el mensaje' };\n      }\n      \n      // Verificar firma en el servidor\n      const authResponse = await fetch(`${process.env.REACT_APP_API_URL || 'http://localhost:5000'}/api/auth/verify-signature`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          address,\n          signature,\n          message: nonceData.message\n        })\n      });\n      \n      const authData = await authResponse.json();\n      if (!authData.success) {\n        return { success: false, error: authData.message || 'Error de autenticaciu00f3n' };\n      }\n      \n      // Autenticaciu00f3n exitosa\n      return {\n        success: true,\n        address,\n        token: authData.token\n      };\n    } catch (error) {\n      console.error('Error en autenticaciu00f3n:', error);\n      return {\n        success: false,\n        error: error.message || 'Error desconocido durante la autenticaciu00f3n'\n      };\n    }\n  },\n  \n  /**\n   * Verifica si hay una sesiu00f3n activa guardada\n   * @returns {boolean}\n   */\n  hasActiveSession: () => {\n    const token = localStorage.getItem('auth_token');\n    const address = localStorage.getItem('user_address');\n    return !!(token && address);\n  },\n  \n  /**\n   * Obtiene el token de autenticaciu00f3n actual\n   * @returns {string|null}\n   */\n  getAuthToken: () => {\n    return localStorage.getItem('auth_token');\n  },\n  \n  /**\n   * Obtiene la direcciu00f3n de billetera guardada\n   * @returns {string|null}\n   */\n  getSavedAddress: () => {\n    return localStorage.getItem('user_address');\n  },\n  \n  /**\n   * Guarda la informaciu00f3n de sesiu00f3n\n   * @param {string} address - Direcciu00f3n de la billetera\n   * @param {string} token - Token JWT\n   */\n  saveSession: (address, token) => {\n    localStorage.setItem('auth_token', token);\n    localStorage.setItem('user_address', address);\n  },\n  \n  /**\n   * Cierra la sesiu00f3n\n   */\n  logout: () => {\n    localStorage.removeItem('auth_token');\n    localStorage.removeItem('user_address');\n  },\n  \n  /**\n   * Verifica si la direcciu00f3n proporcionada es un administrador\n   * @param {string} address - Direcciu00f3n a verificar\n   * @returns {boolean}\n   */\n  isAdmin: (address) => {\n    const adminAddress = process.env.REACT_APP_ADMIN_ADDRESS;\n    if (!adminAddress || !address) return false;\n    return address.toLowerCase() === adminAddress.toLowerCase();\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}